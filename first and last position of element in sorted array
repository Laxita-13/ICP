    class Solution {
        public int[] searchRange(int[] nums, int target) {
            int lefti=findLeftmost(nums, target);
            int righti=findRightmost(nums, target);
            if (lefti<=righti && lefti<nums.length && nums[lefti] == target) {
                return new int[]{lefti, righti};
            } else {
                return new int[]{-1, -1};
            }


        }
            public static int findLeftmost(int[] nums, int target) {
            int left=0, right=nums.length-1;
            while(left<=right){
                int mid=left+(right - left)/2;
                if (nums[mid] < target) {
                    left=mid+1;
                } else {
                    right=mid-1;
                }
            }
            return left;
        }
        public static int findRightmost(int[] nums, int target) {
            int left=0, right=nums.length-1;
            while(left<=right){
                int mid=left+(right - left)/2;
                if (nums[mid]<=target) {
                    left=mid+1;
                } else {
                    right=mid-1;
                }
            }
            return right;
        }

}
